<local:FolderMessagesPageBase x:Class="Tuvi.App.Shared.Views.FolderMessagesPage"
                              xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                              xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                              xmlns:controls="using:Tuvi.App.Shared.Controls"
                              xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                              xmlns:extensions="using:Tuvi.App.Shared.Extensions"
                              xmlns:local="using:Tuvi.App.Shared.Views"
                              xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                              xmlns:viewmodels="using:Tuvi.App.ViewModels"
                              Background="{ThemeResource ApplicationPageBackgroundThemeBrush}"
                              NavigationCacheMode="Enabled">

    <local:FolderMessagesPageBase.DataContext>
        <viewmodels:FolderMessagesPageViewModel />
    </local:FolderMessagesPageBase.DataContext>

    <local:FolderMessagesPageBase.Resources>

        <XamlUICommand x:Name="DeleteItemCommand"
                       x:Uid="/App.Resources/DeleteButton"
                       Command="{Binding DeleteMessageCommand}">
            <XamlUICommand.IconSource>
                <SymbolIconSource Symbol="Delete" />
            </XamlUICommand.IconSource>
            <XamlUICommand.KeyboardAccelerators>
                <KeyboardAccelerator Key="Delete" />
            </XamlUICommand.KeyboardAccelerators>
        </XamlUICommand>

        <XamlUICommand x:Name="MarkAsReadItemCommand"
                       x:Uid="/App.Resources/MarkAsReadButton"
                       Command="{Binding MarkMessageAsReadCommand}">
            <XamlUICommand.IconSource>
                <SymbolIconSource Symbol="Read" />
            </XamlUICommand.IconSource>
            <XamlUICommand.KeyboardAccelerators>
                <KeyboardAccelerator Key="R" Modifiers="Control" />
            </XamlUICommand.KeyboardAccelerators>
        </XamlUICommand>

        <XamlUICommand x:Name="MarkAsUnreadItemCommand"
                       x:Uid="/App.Resources/MarkAsUnreadButton"
                       Command="{Binding MarkMessageAsUnreadCommand}">
            <XamlUICommand.IconSource>
                <SymbolIconSource Symbol="Mail" />
            </XamlUICommand.IconSource>
            <XamlUICommand.KeyboardAccelerators>
                <KeyboardAccelerator Key="U" Modifiers="Control" />
            </XamlUICommand.KeyboardAccelerators>
        </XamlUICommand>

        <XamlUICommand x:Name="FlagItemCommand"
                       x:Uid="/App.Resources/SetFlagButton"
                       Command="{Binding FlagMessageCommand}">
            <XamlUICommand.IconSource>
                <SymbolIconSource Symbol="Flag" />
            </XamlUICommand.IconSource>
            <XamlUICommand.KeyboardAccelerators>
                <KeyboardAccelerator Key="F" Modifiers="Control, Shift" />
            </XamlUICommand.KeyboardAccelerators>
        </XamlUICommand>

        <XamlUICommand x:Name="UnflagItemCommand"
                       x:Uid="/App.Resources/ClearFlagButton"
                       Command="{Binding UnflagMessageCommand}">
            <XamlUICommand.IconSource>
                <SymbolIconSource Symbol="Flag" />
            </XamlUICommand.IconSource>
            <XamlUICommand.KeyboardAccelerators>
                <KeyboardAccelerator Key="U" Modifiers="Control, Shift" />
            </XamlUICommand.KeyboardAccelerators>
        </XamlUICommand>

        <DataTemplate x:Key="DefaultMessageItemTemplate" x:DataType="viewmodels:IMessageInfo">
            <!--<UserControl PointerEntered="ListViewSwipeContainer_PointerEntered"
                             PointerExited="ListViewSwipeContainer_PointerExited">-->
            <UserControl>
                <!--  It leaks see TVM-344  -->
                <UserControl.ContextFlyout>
                    <MenuFlyout>
                        <MenuFlyoutItem Command="{StaticResource MarkAsReadItemCommand}"
                                        CommandParameter="{Binding}"
                                        Visibility="{Binding IsMarkedAsRead, Converter={StaticResource InverseBoolToVisibilityConverter}}" />

                        <MenuFlyoutItem Command="{StaticResource MarkAsUnreadItemCommand}"
                                        CommandParameter="{Binding}"
                                        Visibility="{Binding IsMarkedAsRead}" />

                        <MenuFlyoutItem Command="{StaticResource FlagItemCommand}"
                                        CommandParameter="{Binding}"
                                        Visibility="{Binding IsFlagged, Converter={StaticResource InverseBoolToVisibilityConverter}}" />

                        <MenuFlyoutItem Command="{StaticResource UnflagItemCommand}"
                                        CommandParameter="{Binding}"
                                        Visibility="{Binding IsFlagged}" />

                        <MenuFlyoutItem Command="{StaticResource DeleteItemCommand}" CommandParameter="{Binding}" />
                    </MenuFlyout>
                </UserControl.ContextFlyout>
                <Grid>
                    <!--<SwipeControl BorderThickness="0,1,0,0" BorderBrush="{ThemeResource ButtonBackground}">
                    <SwipeControl.RightItems>
                        <SwipeItems Mode="Execute">
                            <SwipeItem
                                Command="{StaticResource DeleteItemCommand}"
                                CommandParameter="{Binding}"
                                Background="{StaticResource WarningBackgroundBrush}"/>
                        </SwipeItems>
                    </SwipeControl.RightItems>-->
                    <!--  It leaks see TVM-344  -->

                    <Grid Height="72" Padding="12,8,8,8">

                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="1*" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="1*" />
                            <RowDefinition Height="1*" />
                            <RowDefinition Height="1*" />
                        </Grid.RowDefinitions>

                        <StackPanel Orientation="Horizontal">

                            <!--  using Binding instead of Binding shows updated fields of item in message list after returning back to cached page  -->

                            <TextBlock x:Uid="MessageFrom" FontWeight="{Binding IsMarkedAsRead, Converter={StaticResource InverseBoolToFontWeightConverter}}" />

                            <TextBlock Margin="4,0,4,0"
                                       FontWeight="{Binding IsMarkedAsRead, Converter={StaticResource InverseBoolToFontWeightConverter}}"
                                       Text="{Binding MessageSender}" />

                            <TextBlock x:Uid="MessageTo" FontWeight="{Binding IsMarkedAsRead, Converter={StaticResource InverseBoolToFontWeightConverter}}" />

                            <TextBlock Margin="4,0,4,0"
                                       FontWeight="{Binding IsMarkedAsRead, Converter={StaticResource InverseBoolToFontWeightConverter}}"
                                       Text="{Binding MessageReceiver}" />

                        </StackPanel>

                        <TextBlock Grid.Row="1"
                                   Grid.ColumnSpan="5"
                                   Margin="8,0,0,0"
                                   FontWeight="{Binding IsMarkedAsRead, Converter={StaticResource InverseBoolToFontWeightConverter}}"
                                   Text="{Binding MessageSubject}" />

                        <TextBlock Grid.Row="2"
                                   Grid.ColumnSpan="5"
                                   Margin="8,0,0,0"
                                   Opacity="0.6"
                                   Text="{Binding PreviewText, Mode=OneWay}" />

                        <CommandBar x:Name="CommandBar"
                                    Grid.RowSpan="3"
                                    Grid.Column="1"
                                    Background="Transparent"
                                    OverflowButtonVisibility="Collapsed"
                                    Visibility="Collapsed">

                            <AppBarButton Command="{StaticResource DeleteItemCommand}" CommandParameter="{Binding}" />

                            <AppBarButton x:Uid="/App.Resources/MarkAsReadButton"
                                          Command="{StaticResource MarkAsReadItemCommand}"
                                          CommandParameter="{Binding}"
                                          Visibility="{Binding IsMarkedAsRead, Converter={StaticResource InverseBoolToVisibilityConverter}}" />

                            <AppBarButton x:Uid="/App.Resources/MarkAsUnreadButton"
                                          Command="{StaticResource MarkAsUnreadItemCommand}"
                                          CommandParameter="{Binding}"
                                          Visibility="{Binding IsMarkedAsRead}" />

                            <AppBarButton x:Uid="/App.Resources/SetFlagButton"
                                          Command="{StaticResource FlagItemCommand}"
                                          CommandParameter="{Binding}"
                                          Visibility="{Binding IsFlagged, Converter={StaticResource InverseBoolToVisibilityConverter}}" />

                            <AppBarButton x:Uid="/App.Resources/ClearFlagButton"
                                          Command="{StaticResource UnflagItemCommand}"
                                          CommandParameter="{Binding}"
                                          Visibility="{Binding IsFlagged}" />
                        </CommandBar>

                        <SymbolIcon Grid.Column="2"
                                    HorizontalAlignment="Right"
                                    Symbol="Attach"
                                    Visibility="{Binding HasAttachments, Mode=OneWay}" />

                        <SymbolIcon Grid.Column="3"
                                    HorizontalAlignment="Right"
                                    Symbol="Flag"
                                    Visibility="{Binding IsFlagged}" />

                        <TextBlock x:Uid="P2PLabel"
                                   Grid.Column="4"
                                   HorizontalAlignment="Right"
                                   Foreground="Blue"
                                   Visibility="{Binding IsDecentralized}" />

                        <TextBlock Grid.Column="5"
                                   Margin="4,0,0,0"
                                   HorizontalAlignment="Right"
                                   FontWeight="{Binding IsMarkedAsRead, Converter={StaticResource InverseBoolToFontWeightConverter}}"
                                   Opacity="0.6"
                                   Text="{Binding DateBriefString}" />
                    </Grid>

                    <!--</SwipeControl>-->
                    <!--  It leaks see TVM-344  -->
                    <VisualStateManager.VisualStateGroups>
                        <VisualStateGroup x:Name="HoveringStates">
                            <VisualState x:Name="HoverButtonsHidden" />
                            <VisualState x:Name="HoverButtonsShown">
                                <VisualState.Setters>
                                    <Setter Target="CommandBar.Visibility" Value="Visible" />
                                </VisualState.Setters>
                            </VisualState>
                        </VisualStateGroup>
                    </VisualStateManager.VisualStateGroups>
                </Grid>
            </UserControl>
        </DataTemplate>

    </local:FolderMessagesPageBase.Resources>

    <Grid Padding="12,0,12,0">
        <controls:MessageListControl x:Name="MessageListControl"
                                     CancelMessagesDeleteCommand="{Binding CancelMessagesDeleteCommand, Mode=OneWay}"
                                     ExceptionOccurred="OnExceptionOccurred"
                                     IsDeleteInProcess="{Binding IsDeleteInProcess, Mode=OneWay}"
                                     IsWaitingForMoreMessages="{Binding MessageList.IsChanging, Mode=OneWay}"
                                     ItemTemplate="{StaticResource DefaultMessageItemTemplate}"
                                     MessageClickCommand="{Binding OpenMessageCommand, Mode=OneWay}"
                                     Messages="{Binding MessageList, Mode=OneWay}"
                                     MessagesDeletedText="{Binding MessagesDeletedText, Mode=OneWay}"
                                     SelectedItemsChangedCommand="{Binding SelectedItemsChangedCommand}"
                                     SelectionMode="{Binding IsSelectMessagesMode, Mode=OneWay, Converter={StaticResource BoolToSelectionModeConverter}}"
                                     StartDragMessagesCommand="{Binding StartDragMessagesCommand}">

            <controls:MessageListControl.HeaderHolder>
                <TextBlock FontWeight="Bold"
                           Style="{StaticResource NormalTextStyle}"
                           Text="{Binding FolderPath, Mode=OneWay}"
                           TextWrapping="NoWrap" />
            </controls:MessageListControl.HeaderHolder>

            <controls:MessageListControl.CommandBarHolder>
                <CommandBar OverflowButtonVisibility="Collapsed">

                    <AppBarButton x:Uid="/App.Resources/MarkAsReadButton"
                                  Command="{x:Bind ViewModel.MarkSelectedMessagesAsReadCommand, Mode=OneWay}"
                                  CommandParameter="{x:Bind MessageListControl.SelectedItems, Mode=OneWay}"
                                  Icon="Read"
                                  Visibility="{x:Bind ViewModel.IsSelectMessagesMode, Mode=OneWay}" />

                    <AppBarButton x:Uid="/App.Resources/MarkAsUnreadButton"
                                  Command="{x:Bind ViewModel.MarkSelectedMessagesAsUnreadCommand, Mode=OneWay}"
                                  CommandParameter="{x:Bind MessageListControl.SelectedItems, Mode=OneWay}"
                                  Icon="Mail"
                                  Visibility="{x:Bind ViewModel.IsSelectMessagesMode, Mode=OneWay}" />

                    <AppBarButton x:Uid="/App.Resources/SetFlagButton"
                                  Command="{x:Bind ViewModel.FlagSelectedMessagesCommand, Mode=OneWay}"
                                  CommandParameter="{x:Bind MessageListControl.SelectedItems, Mode=OneWay}"
                                  Icon="Flag"
                                  Visibility="{x:Bind ViewModel.IsSelectMessagesMode, Mode=OneWay}" />

                    <AppBarButton x:Uid="/App.Resources/ClearFlagButton"
                                  Command="{x:Bind ViewModel.UnflagSelectedMessagesCommand, Mode=OneWay}"
                                  CommandParameter="{x:Bind MessageListControl.SelectedItems, Mode=OneWay}"
                                  Icon="Flag"
                                  Visibility="{x:Bind ViewModel.IsSelectMessagesMode, Mode=OneWay}" />

                    <AppBarButton x:Uid="/App.Resources/DeleteButton"
                                  Command="{x:Bind ViewModel.DeleteSelectedMessagesCommand, Mode=OneWay}"
                                  CommandParameter="{x:Bind MessageListControl.SelectedItems, Mode=OneWay}"
                                  Icon="Delete"
                                  Visibility="{x:Bind ViewModel.IsSelectMessagesMode, Mode=OneWay}" />

                    <AppBarSeparator Visibility="{x:Bind ViewModel.IsSelectMessagesMode, Mode=OneWay}" />

                    <AppBarButton x:Uid="/App.Resources/SelectAllButton"
                                  Click="OnSelectAllButton"
                                  Icon="SelectAll"
                                  Visibility="{x:Bind ViewModel.IsSelectMessagesMode, Mode=OneWay}" />

                    <AppBarToggleButton x:Uid="/App.Resources/SelectionModeButton"
                                        Icon="Bullets"
                                        IsChecked="{x:Bind ViewModel.IsSelectMessagesMode, Mode=TwoWay}" />

                    <AppBarButton x:Uid="/App.Resources/UpdateButton"
                                  Command="{x:Bind ViewModel.RefreshMessagesCommand, Mode=OneWay}"
                                  Icon="Refresh" />

                </CommandBar>
            </controls:MessageListControl.CommandBarHolder>
        </controls:MessageListControl>

    </Grid>
</local:FolderMessagesPageBase>
