###############################################################################
#
#   Copyright 2025 Eppie(https://eppie.io)
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
###############################################################################

---

name: "Publish Desktop Snap Package"

on: # yamllint disable-line rule:truthy
  workflow_dispatch:
    inputs:
      architecture:
        type: choice
        default: all
        options:
          - all
          - x64
      dotnet-verbosity:
        type: choice
        default: minimal
        options:
          - quiet
          - minimal
          - normal
          - detailed
          - diagnostic

  workflow_call:
    inputs:
      architecture:
        type: string
        required: true
      dotnet-verbosity:
        type: string
        required: true

jobs:

  prepare:
    name: Prepare
    runs-on: ubuntu-latest

    outputs:
      matrix: ${{ steps.publish-config.outputs.matrix }}
      start-publication: ${{ steps.check-config.outputs.correct }}

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Read the binaries publication configuration
        id: publish-config
        uses: finebits/github-actions/toolset/select-configuration@4a126d80a11c5fdc83ce884d3d23dffb30bc4495 # v2.0.0
        with:
          json-file: ./.github/configurations/publish-desktop-span.json
          keywords: "linux,${{ inputs.architecture }}"

      - name: Check configs
        id: check-config
        shell: bash
        run: |
          length=$( echo '${{ steps.publish-config.outputs.config-json }}' | jq '. | length' )
          correct_config=true

          if(( $length == 0 )); then
            echo "::warning::No suitable publish configuration found"
            correct_config=false
          fi

          echo "correct=$correct_config" >> $GITHUB_OUTPUT

  publish:
    name: Publish ${{ matrix.publish.framework }} ${{ matrix.publish.runtime }}
    needs: prepare
    if: needs.prepare.outputs.start-publication == 'true'
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}

    runs-on: ${{ matrix.os }}

    env:
      publish-path: './.publish/${{ matrix.publish.configuration }}/${{ matrix.publish.framework }}/${{ matrix.publish.runtime }}'
      artifacts-path: './.artifacts/${{ matrix.publish.configuration }}/${{ matrix.publish.framework }}/${{ matrix.publish.runtime }}'

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Install Snap Prerequisites
        shell: bash
        run: |

          linux_release=$(lsb_release --release --short)

          snap_core_version='core24'

          if [[ "${linux_release%%.*}" == "24" ]]; then
            snap_core_version='core24'
          elif [[ "${linux_release%%.*}" == "22" ]]; then
            snap_core_version='core22'
          elif [[ "${linux_release%%.*}" == "20" ]]; then
            snap_core_version='core20'
          fi

          sudo apt-get install -y snapd
          sudo snap install $snap_core_version
          sudo snap install multipass
          sudo snap install lxd
          sudo snap install snapcraft --classic
          sudo lxd init --minimal
          sudo usermod --append --groups lxd $USER

      - name: Install Prerequisites
        uses: ./.github/actions/install-prerequisites
        with:
          uno-platform: true

      - name: Assign version
        id: assign-version
        uses: ./.github/actions/assign-version

      - uses: finebits/github-actions/toolset/file/replace-text@4a126d80a11c5fdc83ce884d3d23dffb30bc4495 # v2.0.0
        with:
          file: ./src/Eppie.App/Eppie.App.Shared/Authorization/AuthConfig.Uno.cs
          find-what: '\"<Gmail-ClientId>\"'
          replace-with: "${{ secrets.GMAIL_CLIENT_ID }}"

      - uses: finebits/github-actions/toolset/file/replace-text@4a126d80a11c5fdc83ce884d3d23dffb30bc4495 # v2.0.0
        with:
          file: ./src/Eppie.App/Eppie.App.Shared/Authorization/AuthConfig.Uno.cs
          find-what: '\"<Gmail-ClientSecret>\"'
          replace-with: "${{ secrets.GMAIL_CLIENT_SECRET }}"

      - uses: finebits/github-actions/toolset/file/replace-text@4a126d80a11c5fdc83ce884d3d23dffb30bc4495 # v2.0.0
        with:
          file: ./src/Eppie.App/Eppie.App.Shared/Authorization/AuthConfig.Uno.cs
          find-what: '\"<Outlook-ClientId>\"'
          replace-with: "${{ secrets.OUTLOOK_CLIENT_ID }}"

      - name: Prepare
        if: matrix.publish.tool == 'dotnet'
        shell: bash
        run: |
          semantic_version='${{ steps.assign-version.outputs.semantic-version }}'
          numeric_version='${{ steps.assign-version.outputs.numeric-version }}'
          app_version='${{ steps.assign-version.outputs.app-version }}'
          app_display_version='${{ steps.assign-version.outputs.app-display-version }}'

          project='${{ matrix.publish.project }}'
          configuration='${{ matrix.publish.configuration }}'
          framework='${{ matrix.publish.framework }}'
          runtime='${{ matrix.publish.runtime }}'
          publish_path='${{ env.publish-path }}'

          prepare='${{ join(matrix.publish.prepare, '|') }}'

          IFS_CACHE=$IFS
          IFS='|'

          options="--configuration=$configuration --framework=$framework --runtime=$runtime"
          version_options="--property:Version=\"$semantic_version\" --property:AssemblyVersion=\"$numeric_version\" --property:PackageVersion=\"$numeric_version\" --property:ApplicationVersion=\"$app_version\" --property:ApplicationDisplayVersion=\"$app_display_version\""
          verbosity_option="--verbosity=${{ inputs.dotnet-verbosity }}"
          for prepare_options in $prepare
          do
            echo "$prepare_options $options $version_options $verbosity_option" | xargs dotnet build $project
          done

          IFS=$IFS_CACHE

      - name: Publish
        if: matrix.publish.tool == 'dotnet'
        shell: bash
        run: |
          semantic_version='${{ steps.assign-version.outputs.semantic-version }}'
          numeric_version='${{ steps.assign-version.outputs.numeric-version }}'
          app_version='${{ steps.assign-version.outputs.app-version }}'
          app_display_version='${{ steps.assign-version.outputs.app-display-version }}'

          project='${{ matrix.publish.project }}'
          configuration='${{ matrix.publish.configuration }}'
          framework='${{ matrix.publish.framework }}'
          runtime='${{ matrix.publish.runtime }}'
          publish_path='${{ env.publish-path }}'
          extra_options='${{ matrix.publish.extra }}'

          options="--output=$publish_path --configuration=$configuration --framework=$framework --runtime=$runtime"
          version_options="--property:Version=\"$semantic_version\" --property:AssemblyVersion=\"$numeric_version\" --property:PackageVersion=\"$numeric_version\" --property:ApplicationVersion=\"$app_version\" --property:ApplicationDisplayVersion=\"$app_display_version\""
          verbosity_option="--verbosity=${{ inputs.dotnet-verbosity }}"
          echo "$options $extra_options $version_options $verbosity_option" | xargs dotnet publish $project 

      - name: Prepare Artifacts
        shell: bash
        run: |
          artifact_path="${{ env.artifacts-path }}"
          publish_path="${{ env.publish-path }}"
          tool='${{ matrix.artifact.tool }}'

          artifact_name="eppie.desktop-snap-${{ matrix.publish.runtime }}"

          mkdir -p "$artifact_path"

          if [[ "$tool" == "tar" ]]; then
            tar -czf "${artifact_path}/${artifact_name}.tar.gz" -C "$publish_path" $(cd "$publish_path"; ls *.snap) && echo "Archiving of the artifact '$artifact_name' has been completed successfully." || echo "::warning::Failed to archive artifact '$artifact_name'"
          elif [[ "$tool" == "7z"  ]]; then
            7z a -tzip "${artifact_path}/${artifact_name}.zip" "$publish_path/*.snap" && echo "Archiving of the artifact '$artifact_name' has been completed successfully." || echo "::warning::Failed to archive artifact '$artifact_name'"
          elif [[ "$tool" == "cp" ]]; then
            cp -r ${publish_path}/*.snap ${artifact_path}/ && echo "Copying of the artifact has been completed successfully." || echo "::warning::Failed to copy artifact"
          else
            echo "::warning::Unknown artifact tool: '$tool'"
          fi

      - name: Upload Artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: Eppie.Desktop-snap-${{ matrix.publish.runtime }} [${{ steps.assign-version.outputs.semantic-version }}]
          path: ${{ env.artifacts-path }}
